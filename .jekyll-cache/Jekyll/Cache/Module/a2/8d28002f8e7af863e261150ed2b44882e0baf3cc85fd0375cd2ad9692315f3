I"…





<article id="post-blazor-introduction-webassembly" class="page post mb6" role="article">
  <header>
    <h1 class="post-title flip-project-title">
      
        Introducci√≥n a WebAssembly
      
    </h1>

    <div class="post-date">
      <span>
        
          
          <time datetime="2020-06-09T00:00:00-05:00">09 Jun 2020</time>
        
        
        
        
        
        









in <a href="/blazor/" class="flip-title">Blazor</a>

        









on <span>Blazor</span>

      </span>
      
        
          
          
          
            
            <span class="ellipsis ml1" title="Last modified at">
              <span class="sr-only">Last modified at:</span>
              <span class="icon-history"></span>
              
              <time datetime="2022-04-27T12:53:58-05:00">2022-04-27</time>
            </span>
          
        
      
    </div>
    
    
      
        <div class="img-wrapper lead aspect-ratio sixteen-nine flip-project-img">
          


<img
  
    src="/assets/img/blog/post-headers/web_assembly.png"
  
  alt="Introducci√≥n a WebAssembly"
  
  
  width="864"
  height="486"
  loading="lazy"
/>

        </div>
      
      
    

    



  
    <p class="note-sm" >
      Conociendo a detalle WebAssembly

    </p>
  


  </header>

  
    <p>Hoy en d√≠a las aplicaciones que se ejecutan en navegadores, en lugar de ir instaladas en equipos de computo son cada vez m√°s y muy completas. Un ejemplo de estas, son los programas de oficina como Microsoft 365 o Google Docs, que siempre presentan funciones nuevas y por ende requieren m√°s recursos. Este tipo de aplicaciones web se ofrecen a menudo en JavaScript, pero cada vez m√°s desarrolladores apuestan por WebAssembly: un nuevo planteamiento con resultados sorprendentes.</p>

<h2 id="qu√©-es-webassembly">¬øQu√© es WebAssembly?</h2>

<p>Si buscamos una descripci√≥n corta, ser√≠a que es un standard abierto que permite la ejecuci√≥n de c√≥digo binario en la Web, proporcionando un nivel de rendimiento superior al rendimiento ofrecido por un lenguaje interpretado como JavaScript.</p>

<p>Si no quedo muy entendido,¬† conozcamos su definici√≥n oficial.</p>

<h2 id="definici√≥n-oficial">Definici√≥n Oficial</h2>

<p>El sitio web oficial de WebAssembly (<a href="https://webassembly.org/">Sitio Oficial de WebAssembly</a>) indica que:</p>

<p>Wasm¬†es un formato de instrucciones binario para una m√°quina virtual basada en una pila (stack).¬†Wasm¬†esta dise√±ado como un destino port√°til para la compilaci√≥n de lenguajes de alto nivel como C/ C++/ Rust, permitiendo la implementaci√≥n en la web para aplicaciones de cliente y servidor.</p>

<p><img src="/assets/img/blog/tutorials/blazor-webassembly/webassembly_binary.png" alt="image" /></p>

<h2 id="entonces">¬øEntonces‚Ä¶?</h2>

<p>Sinceramente creo que esta definici√≥n no es muy f√°cil de comprender en un inicio, tratar√© de explicarlo no tan literalmente. Para mi Wasm es dar la posibilidad de que la web pueda ejecutar m√°s de un lenguaje de programaci√≥n, como lo son C++ y RUST a trav√©s de un proceso de ensamblaje, con este proceso mejoraremos el performance o la velocidad de nuestras aplicaciones y tenemos un sin fin de nuevas mejoras e innovaci√≥n que podemos realizar en la web.</p>

<p>Y es que antes, los desarrolladores web pod√≠an crear aplicaciones en Internet, pero para ello hab√≠a que recurrir a JavaScript, y para quienes lo han utilizado, sabemos que JavaScript es relativamente lento y, en determinados escenarios, se ve limitado. Por eso, el World Wide Web Consortium (W3C) ha impulsado este nuevo m√©todo. Sin embargo, para que Wasm pueda funcionar, el navegador debe ser compatible con este lenguaje. Por este motivo, Mozilla (Firefox), Microsoft (Edge), Apple (Safari) y Google (Chrome) han participado en el desarrollo.</p>

<p>En todas las versiones de navegador actuales¬†de estos proveedores se pueden ejecutar aplicaciones en WebAssembly.</p>

<p>Actualmente, WebAssembly presenta un √∫nico inconveniente: se difunde con mucha lentitud. Los desarrolladores web est√°n acostumbrados al trabajo con JavaScript y no hay planes para desbancarlo. La direcci√≥n del proyecto da una gran importancia a que en la comunicaci√≥n Wasm se presente como una opci√≥n complementaria de JavaScript. Pero, gracias a la¬†compatibilidad con los grandes proveedores de navegadores y el W3C, la difusi√≥n est√° comenzando a despegar. Esto tambi√©n se debe a que los visitantes de las p√°ginas web no tienen que realizar ning√∫n paso por su cuenta: las aplicaciones web en WebAssembly se cargan de manera tan sencilla como el c√≥digo en JavaScript, solo que m√°s r√°pido.</p>

<h2 id="ventajas-de-webassembly">Ventajas de WebAssembly</h2>

<ul>
  <li>Alto rendimiento</li>
  <li>Est√°ndar web abierto de W3C</li>
  <li>Sin limitaciones para el usuario</li>
  <li>Posibilidad de uso de realidad virtual en navegadores</li>
  <li>Compatible con todos los proveedores de navegadores</li>
  <li>No se requiere ning√∫n lenguaje de programaci√≥n nuevo</li>
  <li>Uso de C, C++ o Rust para la programaci√≥n de aplicaciones web</li>
  <li>Tama√±os de archivo reducido (perfecto para la navegaci√≥n m√≥vil)</li>
</ul>

<p>Entonces, no hay pretextos o motivos para que los desarrolladores no empiecen a estudiar WebAssembly con m√°s detenimiento.</p>

<p>Nota: Si quieres experimentar con WebAssembly por primera vez, puedes hacerlo en el <a href="https://webassembly.studio/">WebAssembly Studio</a>. Aqu√≠ hay disponible un entorno de desarrollo online para Wasm.</p>

  
</article>
:ET