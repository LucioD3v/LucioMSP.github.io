I"◊%<p>Como ya hemos visto o como ya sabemos, Blazor WASM (o Blazor WebAssembly) es un marco (framework)) de aplicaci√≥n web de una sola p√°gina que nos permite crear aplicaciones web de una sola p√°gina. Construido como parte del ecosistema .NET Core, Blazor usa C# para generar contenido din√°mico para una rica experiencia del cliente.</p>

<h2 id="c√≥mo-funciona-blazor-wasm">¬øC√≥mo funciona Blazor WASM?</h2>
<p>Tradicionalmente, todas las p√°ginas web est√°n estructuradas con HTML, dise√±adas con CSS y usan Javascript para introducir una interactividad din√°mica. C# como lenguaje no se cre√≥ para ejecutarse de forma nativa en los navegadores. Sin embargo, con la presencia de WebAssembly, el navegador ahora puede alojar el tiempo de ejecuci√≥n de dotnet, lo que hace posible ejecutar y ejecutar c√≥digo C#.</p>

<h2 id="cu√°l-es-el-problema-con-javascript-en-el-navegador">¬øCu√°l es el problema con Javascript en el navegador?</h2>
<p>Si bien es cierto que Javascript es el idioma nativo de los navegadores web y puede ejecutarse en el frontend y backend. Pero, ¬øes realmente necesario ejecutar C# en el navegador?</p>

<p>A continuaci√≥n se destacan los beneficios de ejecutar C# en el navegador:</p>

<h3 id="habilitaci√≥n-de-pila-completa-full-stack">Habilitaci√≥n de Pila Completa (Full Stack)</h3>
<p>El ecosistema dotnet core proporciona una de las implementaciones del lado del servidor m√°s seguras y resistentes. Ocupa un lugar destacado entre los marcos de back-end m√°s populares con su implementaci√≥n de ASP.NET.</p>

<p>Al extender el tiempo de ejecuci√≥n de .NET al navegador, Microsoft habilit√≥ una verdadera experiencia de pila completa para permitir que los equipos usen el mismo conocimiento y bibliotecas de clases con las que est√°n familiarizados del lenguaje C# en ambas pilas.</p>

<h3 id="integraci√≥n-m√°s-f√°cil">Integraci√≥n m√°s f√°cil</h3>
<p>En el desarrollo web, hay desarrolladores que se enfocan en el lado del cliente o en el lado del servidor. Si bien las clases de c√≥digo no necesitan conocer los detalles de implementaci√≥n de otras clases, los desarrolladores del lado del cliente necesitan conocimientos sobre la implementaci√≥n del lado del servidor, y esto a veces puede resultar dif√≠cil al usar dos idiomas, especialmente cuando uno est√° fuertemente tipado y el otro no. .</p>

<p>Al usar Blazor WASM, el lado del cliente y el lado del servidor pueden compartir una base de c√≥digo com√∫n en el mismo idioma, que se puede integrar f√°cilmente entre s√≠. Los desarrolladores del lado del cliente comprender√°n la l√≥gica del lado del servidor y c√≥mo integrarla e implementarla sin problemas.</p>

<h3 id="costos-de-desarrollo-reducidos">Costos de desarrollo reducidos</h3>
<p>Los lenguajes de programaci√≥n tardan a√±os en aprenderse y dominarse. Como los desarrolladores no son baratos, encontrar y pagar a los desarrolladores es una decisi√≥n estrat√©gica para los equipos peque√±os. Contar con un equipo de desarrolladores capacitados que puedan alternar entre las aplicaciones del lado del cliente y del servidor sin perder la comprensi√≥n de ambos lados mejora la colaboraci√≥n, lo cual es vital para los equipos peque√±os.</p>

<h3 id="reutilizaci√≥n-de-c√≥digo-mejorada">Reutilizaci√≥n de c√≥digo mejorada</h3>
<p>El principio DRY es una de las formas m√°s sencillas de prevenir y reducir los olores de c√≥digo y el c√≥digo espagueti. Al no tener que volver a escribir c√≥digo nuevo, se reduce el acoplamiento y los cambios futuros no afectan a otras partes del c√≥digo base.</p>

<p>Se pueden compartir y consumir bibliotecas .NET completas en Blazor WASM. Hacer uso de la l√≥gica, la funcionalidad y las capacidades existentes permite a los desarrolladores centrarse en innovar m√°s, ya que no est√°n obligados a reinventar la rueda.</p>

<h2 id="caracter√≠sticas-de-blazor-wasm">Caracter√≠sticas de Blazor WASM</h2>
<p>Blazor WASM tiene un conjunto √∫nico de caracter√≠sticas que lo convierten en una opci√≥n convincente para el desarrollo del lado del cliente.</p>

<h3 id="componentes-reutilizables">Componentes reutilizables</h3>
<p>Con Blazor, puede crear componentes para usarlos en su aplicaci√≥n. Los componentes son bloques de construcci√≥n para una interfaz de usuario, como formularios, tarjetas, tablas, cuadr√≠culas y muchos m√°s.</p>

<p>Estos componentes se pueden definir una vez y llamar varias veces. En esencia, los componentes son un grupo de elementos HTML que especifican la estructura de un sitio.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&lt;Dropdown&gt;
    &lt;DropdownToggle <span class="nv">Color</span><span class="o">=</span><span class="s2">"Color.Primary"</span><span class="o">&gt;</span>
        Dropdown
    &lt;/DropdownToggle&gt;
    &lt;DropdownMenu&gt;
        &lt;DropdownItem&gt;Action&lt;/DropdownItem&gt;
        &lt;DropdownDivider /&gt;
        &lt;DropdownItem&gt;Another Action&lt;/DropdownItem&gt;
    &lt;/DropdownMenu&gt;
&lt;/Dropdown&gt;

</code></pre></div></div>

<p>Lo anterior es un componente de men√∫ desplegable con Blazorise. Esto hace que el desarrollo sea m√°s f√°cil y r√°pido y se puede llamar en cualquier momento que desee crear un men√∫ desplegable, sin tener que escribir mucho c√≥digo.</p>

<h3 id="hot-reload">Hot Reload</h3>
<p>La recarga activa hace que el navegador se actualice autom√°ticamente cuando se realizan cambios en el c√≥digo base. Esto ayuda a mejorar la productividad de los desarrolladores, ya que necesitan reiniciar la aplicaci√≥n para ver los efectos de esos cambios.</p>

<h3 id="rendimiento-r√°pido">Rendimiento r√°pido</h3>
<p>Blazor WASM en la primera carga tarda un tiempo, ya que se debe descargar el entorno de tiempo de ejecuci√≥n y otras dependencias. Luego, Blazor WASM se basa en el tiempo de ejecuci√≥n descargado para ejecutarse a velocidades casi nativas en el navegador, lo que hace que las aplicaciones sean m√°s r√°pidas.</p>

<h2 id="qu√©-se-puede-construir-con-blazor">¬øQu√© se puede construir con Blazor?</h2>
<p>Esta secci√≥n destaca algunos de los mejores casos de uso para Blazor</p>

<h2 id="aplicaci√≥n-web-progresiva">Aplicaci√≥n Web Progresiva</h2>
<p>Una aplicaci√≥n web progresiva es una aplicaci√≥n que se puede instalar y ejecutar como una aplicaci√≥n nativa. La creaci√≥n de PWA ayuda a los equipos a proporcionar experiencias m√≥viles y de escritorio nativas para sus aplicaciones sin crearlas espec√≠ficamente para esos entornos.</p>

<p>Para equipos peque√±os, Blazor puede ser una forma de ahorrar costos sin sacrificar el rendimiento y la entrega.</p>

<h3 id="aplicaciones-de-una-sola-p√°gina">Aplicaciones de una sola p√°gina</h3>
<p>Una aplicaci√≥n de p√°gina √∫nica (SPA) es una aplicaci√≥n web o sitio web que interact√∫a con el usuario al reescribir din√°micamente la p√°gina web actual con nuevos datos del servidor web, en lugar del m√©todo predeterminado de un navegador web que carga p√°ginas nuevas completas.</p>

<p>En Blazor WebAssembly, cuando el cliente realiza una solicitud, se presenta como un poco de HTML, CSS y JavaScript, como todas las dem√°s aplicaciones web. El archivo blazor.webassembly.js arranca la aplicaci√≥n y comienza a cargar archivos binarios .NET que se pueden ver en la pesta√±a Red del navegador.</p>

<h3 id="aplicaciones-fuera-de-l√≠nea">Aplicaciones fuera de l√≠nea</h3>
<p>Debido a que Blazor WASM descarga el tiempo de ejecuci√≥n y las dependencias al inicio, la mayor parte de la representaci√≥n se realiza en el lado del cliente. Como resultado, puede funcionar bien en escenarios donde no hay Internet o una conexi√≥n limitada.</p>

<h2 id="desacreditando-conceptos-err√≥neos-comunes">Desacreditando conceptos err√≥neos comunes</h2>
<p>Al igual que todos los dem√°s marcos de SPA, Blazor WASM tiene sus deficiencias. Aqu√≠ hay algunos para tomar nota</p>

<h3 id="enorme-carga-√∫til-y-tama√±o-inicial-lento">Enorme carga √∫til y tama√±o inicial lento</h3>
<p>Las aplicaciones Blazor WASM pueden crecer r√°pidamente debido a los tiempos de ejecuci√≥n necesarios para ejecutar C# en el navegador. Este gran tama√±o puede hacer que el inicio inicial sea lento, y esto puede afectar una mala conexi√≥n a Internet. Afortunadamente, esto solo sucede una vez, por lo que las cargas subsiguientes son m√°s r√°pidas y m√°s peque√±as, ya que la mayor parte del trabajo pesado ya se ha realizado.</p>

<h3 id="no-m√°s-javascript">No m√°s JavaScript</h3>
<p>El objetivo de Blazor WASM es permitir que C# se ejecute en el navegador, pero eso no significa que no necesitar√° javascript en absoluto. Blazor WASM no puede interactuar directamente con el DOM ni tener acceso a las API del navegador y, como resultado, es necesario llamarlas mediante javascript, en un proceso llamado Javascript Interop. Dado que Javascript es el idioma nativo de los navegadores, ser√° necesario para acceder a las funcionalidades basadas en el navegador y</p>

<h2 id="conclusi√≥n">Conclusi√≥n</h2>
<p>En este art√≠culo, vimos como es que Blazor ayuda a los equipos a crear interfaces de interfaz de usuario enriquecidas. Si tiene alguna sugerencia o consulta sobre este art√≠culo, por favor p√≥ngase en contacto conmigo.</p>

<p>Aprovecho el espacio para invitarte a dejar un comentario si deseas que d√© m√°s detalles sobre cualquier cosa dentro de este art√≠culo.</p>

<p>M√°s informaci√≥n:</p>

<ul>
  <li><a href="https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor">Web Apps Blazor</a></li>
  <li><a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/webassembly?view=aspnetcore-6.0">Host and deploy ASP.NET Core Blazor WebAssembly</a></li>
</ul>

<p>¬°Hasta la pr√≥xima!</p>
:ET