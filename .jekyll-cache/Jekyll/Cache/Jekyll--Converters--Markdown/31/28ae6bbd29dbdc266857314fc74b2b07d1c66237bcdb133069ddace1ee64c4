I"{<p>Este es el 1er art√≠culo o d√≠a de 14 del recorrido del aprendizaje sobre Git. El d√≠a de hoy (02-Nov-2022) exploraremos de lleno sobre que es VCS.</p>

<p>Cuando hablamos sobre ‚Äúcontrol de versiones‚Äù en programaci√≥n cabe destacar que nos referimos a la capacidad de registrar los cambios realizados sobre los archivos del c√≥digo fuente.</p>

<p>Como se han de imaginar, este control se puede hacerse de manera manual creando diferentes archivos para cada modificaci√≥n o realizando copias incrementales con la fecha de modificaci√≥n, tal y como muchos de nosotros lo haciamos con un trabajo para la Universidad, ¬ørecuerdan?:</p>

<ul>
  <li>Trabajo Final</li>
  <li>Trabajo Final 1.0</li>
  <li>Trabajo Final 2.0</li>
  <li>Trabajo Final 3.0</li>
  <li>Trabajo Final - Bueno</li>
  <li>Trabajo Final - Ahora si es el bueno</li>
  <li>Trabajo Final Final - Este es el bueno</li>
</ul>

<p>Pero esto nos llevaba mucho tiempo y daba como resultado un sistema desorganizado por lo que es mejor automatizar el proceso. Por ello aparecier√≥n los VCS, pero ¬øqu√© es esto?</p>

<h2 id="qu√©-es-vcs">¬øQu√© es VCS?</h2>
<p>Los VCS (version control system - por sus siglas en ingl√©s) son aplicaciones que nos permiten realizar el control de modificaciones de c√≥digo fuente de manera autom√°tica y eficiente. En otras palabras este realiza un seguimiento de cada cambio en el c√≥digo en una especie de registro. Por lo cual si se llegase a cometer un error, se puede retroceder en el tiempo (no tanto as√≠ pero m√≠nimo en el registro), para posteriormente compararlo con versiones anteriores y ayudar a mitigar el error, al tiempo que minimiza la interrupci√≥n de otros que est√°n trabajando en ese c√≥digo.</p>

<h2 id="por-qu√©-utilizar-un-control-de-versiones">¬øPor qu√© utilizar un Control de Versiones?</h2>
<p>Para la mayor√≠a de los proyectos en los que se usa c√≥digo, ya sea el c√≥digo de la aplicaci√≥n o el c√≥digo que usa para implementar sus recursos de infraestructura. Es la joya de la corona. Ya que para ser honesto y siendo mi profesi√≥n el desarrollar aplicaciones (programador), el c√≥digo es un bien preciado que debe ser protegido.</p>

<p>El repositorio de c√≥digo contiene conocimiento e historial de trabajo a trav√©s del proyecto. Contiene la clave de los problemas encontrados y las soluciones. Este nos sirve para indicarnos el tiempo y esfuerzo que se ha consumido al realizar determinado proyecto o tarea.</p>

<p>As√≠ mismo, el control de versiones protege el c√≥digo de errores catastr√≥ficos y casuales. Ya que recordemos, somos humanos y facilmente cometemos errores, como por ejemplo y en este caso, guardando un archivo equivocado, o que determinada linea de c√≥digo haga que truene nuestro aplicativo. Y no me dejaran mentir, todos hemos estado all√≠. Todos lo hemos hecho aunque sea una sola vez.</p>

<p>Por ejemplo, cuando estamos trabajando en documentos como Word o Excel, el historial de OneDrive nos ha salvado. Puesto que nos ayud√≥ a restaurar una versi√≥n anterior que guardamos accidentalmente. Ahora bien, el control de versiones puede hacer esa misma tarea para el c√≥digo.</p>

<p>Algo ademas que esta super genial, es que varias personas pueden estar trabajando en el c√≥digo al mismo tiempo. Hoy en d√≠a no es raro que un equipo de personas trabaje en el mismo c√≥digo. Por ejemplo un ingeniero podr√≠a estar agregando una nueva caracter√≠stica al c√≥digo mientras que otro est√° tratando de resolver un error.</p>

<p>El control de versiones nos permite realizar un seguimiento de los cambios por parte de las personas del equipo o de quien haya colaborado.</p>

<p>Tambi√©n podemos crear lo que se conoce como ramas, a partir del c√≥digo principal. Esto permite que cada miembro del equipo trabaje en su tarea por separado y luego, cuando est√©n listos, pueden fusionar sus cambios en el c√≥digo principal.</p>

<p>Las ramas permiten que las personas trabajen sin ser bloqueadas por otros. Y poder fusionar el c√≥digo con el c√≥digo principal permite realizar comprobaciones para garantizar que no haya conflictos de c√≥digo que puedan causar problemas.</p>

<h2 id="caracter√≠sticas-principales">Caracter√≠sticas Principales</h2>
<p>Algunas de las  caracter√≠sticas de los sistemas de control de versiones son:</p>

<ul>
  <li>Reporte de cambios: Cuando un archivo es modificado se guarda la fecha y hora del cambio, el autor que lo realiz√≥ y un mensaje opcional explicando las razones o naturaleza del cambio.</li>
  <li>Sincronizaci√≥n: Si varias personas trabajan o utilizan el mismo proyecto permite que todas puedan tener la √∫ltima versi√≥n</li>
  <li>Backup y restauraci√≥n: Permite guardar los cambios realizados en los archivos y restaurar el archivo a cualquiera de los estados previos en los que fue guardado</li>
  <li>Crear branch: Permite crear una branch (rama) del proyecto y trabajarla por separado sin modificar el proyecto original.</li>
  <li>Realizar merge: Permite convertir el contenido de branch al proyecto principal</li>
</ul>

<h3 id="nota-importante-el-control-de-versiones-no-es-solo-para-desarrolladores-de-software">Nota Importante: El control de versiones NO es solo para desarrolladores de software.</h3>

<h2 id="el-control-de-versiones-es-lo-mismo-que-el-control-de-c√≥digo-fuente">¬øEl control de versiones es lo mismo que el control de c√≥digo fuente?</h2>
<p>Los t√©rminos control de versiones y control de c√≥digo fuente se usan indistintamente, pero quieren decir lo mismo.</p>

<h2 id="se-puede-programar-sin-hacer-uso-de-un-control-de-versiones">¬øSe puede programar sin hacer uso de un control de versiones?</h2>
<p>La respuesta concreta es si, si es posible continuar trabajando en su software o infraestructura como proyecto de c√≥digo sin hacer uso de ning√∫n control de versi√≥n, pero hacerlo sinceramente puede poner en riesgo los esfuerzos y el trabajo del equipo, puesto que como lo comentamos con anterioridad, si se presenta un error, el poder regresarlo a una versi√≥n anterior seria muy lento y complicado, ya que a veces solo requerimos hacer una peque√±a regresi√≥n y no una de gran escala.</p>

<p>Por ende, la pregunta que realmente nos debemos de hacer no es si se deber√≠a de utilizar el control de versiones o no, sino m√°s bien qu√© sistema o herramienta de control de versiones deber√≠amos usar.</p>

<h2 id="14-d√≠as-de-git">14 d√≠as de Git</h2>

<p>Como ya lo suponemos o sabemos, existen muchos sistemas de control de versiones diferentes, en nuestro pr√≥ximo ejercicio (art√≠culo) de aprendizaje como parte de 14 d√≠as de Git. Exploraremos <a href="https://git-scm.com/">Git</a> y c√≥mo se puede usar en el control de versiones.</p>

<p>Recuerda que puedes seguirlo aqu√≠: <a href="https://github.com/LucioMSP/14-dias-de-Git">https://github.com/LucioMSP/14-dias-de-Git</a></p>

<h2 id="happy-coding">¬°Happy Coding!</h2>

<h3 id="nota">Nota:</h3>
<p>Este art√≠culo es una traducci√≥n al espa√±ol no 100% fiel a <a href="https://www.techielass.com/what-is-version-control/">Techielass por Sarah Lean</a></p>
:ET